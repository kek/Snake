local function put_food(self)
    local food = {x = math.random(2, 47), y = math.random(2, 47)}
    local tile = tilemap.get_tile("#grid", "layer1", food.x, food.y)

    if tile == 0 then
        tilemap.set_tile("#grid", "layer1", food.x, food.y, 3)
    else
        put_food(self)
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")

    self.segments = {
        {x = 7, y = 24}, {x = 8, y = 24}, {x = 9, y = 24}, {x = 10, y = 24}
    }
    self.dir = {x = 1, y = 0}
    self.dirqueue = {}
    self.speed = 7.0
    self.alive = true
    self.t = 0
    self.score = 0
    self.debug = "ok"

    math.randomseed(socket.gettime())
    put_food(self)
end

function update(self, dt)
    local color_green = vmath.vector4(0, 1, 0, 1)
    msg.post("@render:", "draw_debug_text", {
        text = self.score,
        position = vmath.vector3(1300, 1450, 0),
        color = color_green
    })
    local color_yellow = vmath.vector4(1, 1, 0, 1)
    msg.post("@render:", "draw_debug_text", {
        text = self.debug,
        position = vmath.vector3(100, 1450, 0),
        color = color_yellow
    })
    
    self.t = self.t + dt
    if self.t >= 1.0 / self.speed and self.alive then
        self.score = self.score + (self.speed * 10)
        local newdir = table.remove(self.dirqueue, 1)

        if newdir then
            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
            if not opposite then self.dir = newdir end
        end

        local head = self.segments[#self.segments]
        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

        table.insert(self.segments, newhead)

        local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)

        if tile == 2 or tile == 4 then
            self.alive = false
            self.score = "GAME OVER"
        elseif tile == 3 then
            self.speed = self.speed * 1.05
            self.score = self.score + math.floor(math.random() * 100 * self.speed)
            put_food(self)
        else
            local tail = table.remove(self.segments, 1)
            tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
        end

        for i, s in ipairs(self.segments) do
            tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
        end

        self.t = 0
    end
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = 1})
    elseif action_id == hash("down") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = -1})
    elseif action_id == hash("left") and action.pressed then
        table.insert(self.dirqueue, {x = -1, y = 0})
    elseif action_id == hash("right") and action.pressed then
        table.insert(self.dirqueue, {x = 1, y = 0})
    elseif action_id == hash("quit") and action.pressed then
        self.debug = "Quit?"
    end
end

function final(self)
    -- Add finalization code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Learn more: https://defold.com/manuals/message-passing/
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Learn more: https://defold.com/manuals/hot-reload/
    -- Remove this function if not needed
end
